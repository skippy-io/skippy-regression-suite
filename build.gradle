plugins {
    id 'java'
}

repositories {
    mavenCentral()
    maven { url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation gradleTestKit()
}

task copyProjectsToResourcesFolder(type: Copy) {
    from 'test-projects'
    into 'src/test/resources/test-projects'
}

task replaceSkippyVersionAndWriteEmptySettingsFile {
    doLast {
        fileTree(dir: '.', include: ['src/test/resources/test-projects/**/build.gradle']).each { File file ->
            var content = file.text
            content = content.replaceAll('project.skippyVersion', "'${project.skippyVersion}'")
            content = content.replaceAll('project.junit4Version', "'${project.junit4Version}'")
            content = content.replaceAll('project.junit5Version', "'${project.junit5Version}'")
            file.write(content)

            File settingsFile = new File(file.parent, "settings.gradle")
            if (!settingsFile.exists()) {
                settingsFile.createNewFile()
            }

        }
        fileTree(dir: '.', include: ['src/test/resources/test-projects/**/pom.xml']).each { File file ->
            var content = file.text
            content = content.replaceAll('project.skippyVersion', project.skippyVersion)
            content = content.replaceAll('project.junit4Version', project.junit4Version)
            content = content.replaceAll('project.junit5Version', project.junit5Version)
            file.write(content)
        }
    }
}

clean {
    doLast {
        new File('src/test/resources/test-projects/').deleteDir()
    }
}

replaceSkippyVersionAndWriteEmptySettingsFile.dependsOn copyProjectsToResourcesFolder
processTestResources.dependsOn replaceSkippyVersionAndWriteEmptySettingsFile

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
}